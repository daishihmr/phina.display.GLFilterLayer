{"version":3,"sources":["GLFilterLayer.js","node/BloomNode.js","node/CopyNode.js","node/GaussianNode.js","node/ListNode.js","node/MixNode.js","node/MonotoneNode.js","node/MultiGaussianNode.js","node/Node.js","node/ReverseNode.js","node/SepiaNode.js","node/ShaderNode.js","node/ZoomBlurNode.js"],"names":[],"mappingshxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"phina.glfilter.js","sourcesContent":["phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.GLFilterLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    gl: null,\n\n    canvas: null,\n    renderer: null,\n    domElement: null,\n\n    sizeInfo: null,\n    domElementGL: null,\n\n    resizedCanvas: null,\n    texture: null,\n\n    framebuffer0: null,\n    framebuffer1: null,\n\n    startNode: null,\n    nodes: null,\n    endNode: null,\n\n    init: function(options) {\n      this.superInit(options);\n\n      var width = options.width;\n      var height = options.height;\n\n      // 2D\n      this.canvas = phina.graphics.Canvas();\n      this.canvas.width = width;\n      this.canvas.height = height;\n      this.renderer = phina.display.CanvasRenderer(this.canvas);\n      this.domElement = this.canvas.domElement;\n\n      // 3D\n      this.sizeInfo = phigl.ImageUtil.calcSizePowOf2(width, height);\n      this.domElementGL = document.createElement(\"canvas\");\n\n      var gl = this.gl = this.domElementGL.getContext(\"webgl\");\n\n      this.domElementGL.width = this.sizeInfo.width;\n      this.domElementGL.height = this.sizeInfo.height;\n      gl.viewport(0, 0, this.sizeInfo.width, this.sizeInfo.height);\n\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n\n      this.resizedCanvas = phina.graphics.Canvas();\n      this.resizedCanvas.setSize(this.sizeInfo.width, this.sizeInfo.height);\n      this.texture = phigl.Texture(gl);\n\n      this.framebuffer0 = phigl.Framebuffer(gl, this.sizeInfo.width, this.sizeInfo.height);\n      this.framebuffer1 = phigl.Framebuffer(gl, this.sizeInfo.width, this.sizeInfo.height);\n\n      this.startNode = phina.glfilter.StartNode();\n      this.startNode.layer = this;\n      this.nodes = [];\n      this.endNode = phina.glfilter.EndNode();\n      this.endNode.layer = this;\n    },\n\n    addNode: function(node) {\n      node.layer = this;\n      this.nodes.push(node);\n      return this;\n    },\n\n    render: function() {\n      var sizeInfo = this.sizeInfo;\n      this.resizedCanvas.clear();\n      this.resizedCanvas.context.drawImage(this.domElement,\n        // src\n        0, 0, this.width, this.height,\n        // dst\n        sizeInfo.srcX, sizeInfo.srcY, sizeInfo.srcWidth, sizeInfo.srcHeight\n      );\n      this.texture.setImage(this.resizedCanvas);\n\n      this.startNode.flare(\"prerender\");\n      this.startNode.render(this, this.framebuffer1);\n      this.startNode.flare(\"postrender\");\n\n      var src = this.framebuffer1;\n      var dst = this.framebuffer0;\n      this.nodes\n        .filter(function(filterNode) {\n          return filterNode.enabled;\n        })\n        .forEach(function(filterNode) {\n          filterNode.flare(\"prerender\");\n          filterNode.render(src, dst);\n          filterNode.flare(\"postrender\");\n\n          // swap\n          var t = src;\n          src = dst;\n          dst = t;\n        });\n\n      this.endNode.flare(\"prerender\");\n      this.endNode.render(src);\n      this.endNode.flare(\"postrender\");\n    },\n\n    draw: function(canvas) {\n      // 2D\n      var temp = this._worldMatrix;\n      this._worldMatrix = null;\n      this.renderer.render(this);\n      this._worldMatrix = temp;\n\n      // 3D\n      this.render();\n\n      var domElementGL = this.domElementGL;\n      var sizeInfo = this.sizeInfo;\n      canvas.context.drawImage(domElementGL,\n        // src\n        sizeInfo.srcX, sizeInfo.srcY, sizeInfo.srcWidth, sizeInfo.srcHeight,\n        // dst\n        -this.width * this.originX, -this.height * this.originY, this.width, this.height\n      );\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.BloomNode\", {\n    superClass: \"phina.glfilter.Node\",\n\n    init: function() {\n      this.superInit();\n      this.luminanceNode = phina.glfilter.LuminanceFilter();\n      this.gaussianNode = phina.glfilter.MultiGaussianNode(4, 4);\n      this.mixNode = phina.glfilter.MixNode(1.0, 1.0);\n\n      this.minBright = 0.0;\n    },\n\n    _setup: function() {\n      this.superMethod(\"_setup\");\n\n      var gl = this.layer.gl;\n      var sizeInfo = this.layer.sizeInfo;\n\n      this.luminanceNode.layer = this.layer;\n      this.gaussianNode.layer = this.layer;\n      this.mixNode.layer = this.layer;\n\n      this.bloomPath0 = phigl.Framebuffer(gl, sizeInfo.width, sizeInfo.height);\n      this.bloomPath1 = phigl.Framebuffer(gl, sizeInfo.width, sizeInfo.height);\n    },\n\n    _render: function(src, dst) {\n      this.luminanceNode.render(src, this.bloomPath0);\n      this.gaussianNode.render(this.bloomPath0, this.bloomPath1);\n      this.mixNode.render(src, this.bloomPath1, dst);\n    },\n\n    _accessor: {\n      minBright: {\n        get: function() {\n          return this.luminanceNode.uniformValues[\"minBright\"];\n        },\n        set: function(v) {\n          this.luminanceNode.uniformValues[\"minBright\"] = v;\n        },\n      },\n    },\n\n  });\n\n  phina.define(\"phina.glfilter.LuminanceFilter\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n        \"uniform float minBright;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void){\",\n        \"  vec4 texel = texture2D(texture, vUv);\",\n        \"  vec3 col = max(vec3(0.0), (texel - minBright).rgb);\",\n        \"  gl_FragColor = vec4(col, texel.a);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n    getFragmentShaderUniforms: function() {\n      return [\"texture\", \"minBright\"];\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.CopyNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.GaussianNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n        \"uniform vec2 resolution;\",\n        \"uniform vec2 direction;\",\n\n        \"varying vec2 vUv;\",\n\n        // \"vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\",\n        // \"  vec4 color = vec4(0.0);\",\n        // \"  vec2 off1 = vec2(1.411764705882353) * direction;\",\n        // \"  vec2 off2 = vec2(3.2941176470588234) * direction;\",\n        // \"  vec2 off3 = vec2(5.176470588235294) * direction;\",\n        // \"  color += texture2D(image, uv) * 0.1964825501511404;\",\n        // \"  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\",\n        // \"  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\",\n        // \"  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\",\n        // \"  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\",\n        // \"  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\",\n        // \"  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\",\n        // \"  return color;\",\n        // \"}\",\n\n        // \"vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\",\n        // \"  vec4 color = vec4(0.0);\",\n        // \"  vec2 off1 = vec2(1.3846153846) * direction;\",\n        // \"  vec2 off2 = vec2(3.2307692308) * direction;\",\n        // \"  color += texture2D(image, uv) * 0.2270270270;\",\n        // \"  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\",\n        // \"  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\",\n        // \"  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\",\n        // \"  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\",\n        // \"  return color;\",\n        // \"}\",\n\n        \"vec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\",\n        \"  vec4 color = vec4(0.0);\",\n        \"  vec2 off1 = vec2(1.3333333333333333) * direction;\",\n        \"  color += texture2D(image, uv) * 0.29411764705882354;\",\n        \"  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\",\n        \"  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\",\n        \"  return color; \",\n        \"}\",\n\n        \"void main(void) {\",\n        \"  vec4 col = blur5(texture, vUv, resolution, direction);\",\n        \"  gl_FragColor = col;\",\n        \"}\",\n\n      ].join(\"\\n\");\n    },\n    getFragmentShaderUniforms: function() {\n      return [\n        \"texture\",\n        \"resolution\", // 画面の解像度\n        \"direction\", // ブレ方向\n      ];\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.ListNode\", {\n    superClass: \"phina.glfilter.Node\",\n\n    nodes: null,\n\n    init: function() {\n      this.superInit();\n      this.nodes = [];\n    },\n\n    _setup: function() {\n      var gl = this.layer.gl;\n      var sizeInfo = this.layer.sizeInfo;\n\n      this.framebuffer0 = phigl.Framebuffer(gl, sizeInfo.width, sizeInfo.height);\n      this.framebuffer1 = phigl.Framebuffer(gl, sizeInfo.width, sizeInfo.height);\n    },\n\n    isEnabled: function() {\n      var count = this.nodes.filter(function(n) {\n        return n.enabled;\n      }).length;\n      return this._enabled && count > 0;\n    },\n\n    addNode: function(node) {\n      this.nodes.push(node);\n      node.layer = this.layer;\n    },\n\n    _render: function(src, dst) {\n      var nodes = this.nodes.filter(function(n) {\n        return n.enabled;\n      });\n\n      if (nodes.length === 1) {\n        nodes.first.render(src, dst);\n      } else if (nodes.length > 0) {\n        nodes.first.render(src, this.framebuffer0);\n        for (var i = 1; i < nodes.length - 1; i++) {\n          nodes[i].render(this.framebuffer0, this.framebuffer1);\n          var t = this.framebuffer0;\n          this.framebuffer0 = this.framebuffer1;\n          this.framebuffer1 = t;\n        }\n        nodes.last.render(this.framebuffer0, dst);\n      }\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.MixNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function(weight0, weight1) {\n      this.superInit();\n      this.uniformValues[\"weight0\"] = weight0;\n      this.uniformValues[\"weight1\"] = weight1;\n    },\n\n    render: function(src0, src1, dst) {\n      var gl = this.layer.gl;\n\n      dst.bind();\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      this.screen.uniforms[\"texture0\"].setValue(0).setTexture(src0.texture);\n      this.screen.uniforms[\"texture1\"].setValue(1).setTexture(src1.texture);\n      this.uniformValues\n        .forIn(function(key, value) {\n          if (key === \"texture0\" || key === \"texture1\") return;\n          this.screen.uniforms[key].setValue(value);\n        }.bind(this));\n      this.screen.draw();\n\n      gl.flush();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture0;\",\n        \"uniform sampler2D texture1;\",\n        \"uniform float weight0;\",\n        \"uniform float weight1;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 col0 = texture2D(texture0, vUv);\",\n        \"  vec4 col1 = texture2D(texture1, vUv);\",\n\n        \"  vec3 srcColor = col1.rgb * col1.a;\",\n        \"  vec3 dstColor = col0.rgb * 1.0;\",\n        \"  float srcAlpha = col1.a * 1.0;\",\n        \"  float dstAlpha = col0.a * 1.0;\",\n        \"  gl_FragColor = vec4(srcColor + dstColor, srcAlpha + dstAlpha);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n    getFragmentShaderUniforms: function() {\n      return [\"texture0\", \"texture1\", \"weight0\", \"weight1\"];\n    },\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.MonotoneNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 col = texture2D(texture, vUv);\",\n        \"  if (col.a == 0.0) discard;\",\n        \"  float c = col.r + col.g + col.b;\",\n        \"  gl_FragColor = vec4(vec3(c / 3.0), col.a);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.MultiGaussianNode\", {\n    superClass: \"phina.glfilter.ListNode\",\n\n    init: function(unit, count) {\n      this.superInit();\n\n      this.unit = unit || 0;\n      this.count = count || 4;\n\n      this.on(\"prerender\", function() {\n        this.setUnit();\n      });\n    },\n\n    setUnit: function() {\n      this.nodes.forEach(function(n, i) {\n        if (i % 2 === 0) {\n          n.uniformValues[\"direction\"] = [i * this.unit, 0];\n        } else {\n          n.uniformValues[\"direction\"] = [0, i * this.unit];\n        }\n      }.bind(this));\n    },\n\n    _setup: function() {\n      this.superMethod(\"_setup\");\n\n      var sizeInfo = this.layer.sizeInfo;\n      for (var i = 0; i < this.count; i++) {\n        const gfH = GaussianNode();\n        gfH.enabled = true;\n        gfH.uniformValues[\"resolution\"] = [sizeInfo.width, sizeInfo.height];\n        this.addNode(gfH);\n\n        const gfV = GaussianNode();\n        gfV.enabled = true;\n        gfV.uniformValues[\"resolution\"] = [sizeInfo.width, sizeInfo.height];\n        this.addNode(gfV);\n      }\n\n      this.setUnit();\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.Node\", {\n    superClass: \"phina.util.EventDispatcher\",\n\n    /** @type {GLFilterLayer} */\n    _layer: null,\n\n    _enabled: true,\n\n    init: function() {\n      this.superInit();\n    },\n\n    isEnabled: function() {\n      return this._enabled;\n    },\n    setEnabled: function(v) {\n      this._enabled = v;\n    },\n\n    setLayer: function(layer) {\n      this._layer = layer;\n      this._setup();\n\n      return this;\n    },\n\n    _setup: function() {\n      return this;\n    },\n\n    /**\n     * @param src {{texture:phigl.Texture}}\n     * @param dst {phina.glfilter.Node}\n     */\n    render: function(src, dst) {\n      this.flare(\"prerender\");\n      this._render(src, dst);\n      this.flare(\"postrender\");\n    },\n\n    _render: function(src, dst) {},\n\n    addTo: function(layer) {\n      layer.addNode(this);\n      return this;\n    },\n\n    _accessor: {\n      enabled: {\n        get: function() {\n          return this.isEnabled();\n        },\n        set: function(v) {\n          this.setEnabled(v);\n        },\n      },\n      layer: {\n        get: function() {\n          return this._layer;\n        },\n        set: function(v) {\n          this.setLayer(v);\n        },\n      },\n    }\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.ReverseNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 col = texture2D(texture, vUv);\",\n        \"  if (col.a == 0.0) discard;\",\n        \"  gl_FragColor = vec4(1.0 - col.rgb, col.a);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.SepiaNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 tex = texture2D(texture, vUv);\",\n        \"  vec3 c = vec3((tex.r + tex.g + tex.b) / 3.0);\",\n        \"  gl_FragColor = vec4(c.r * 1.2, c.g * 1.05, c.b * 0.9, tex.a);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  // var projectionMatrix = mat4.create();\n  // var viewMatrix = mat4.create();\n  // var modelMatrix = mat4.create();\n  // var mvpMatrix = mat4.create();\n  // mat4.ortho(projectionMatrix, -0.5, 0.5, -0.5, 0.5, 0.9, 1.1);\n  // mat4.lookAt(viewMatrix, [0, 0, 1], [0, 0, 0], [0, 1, 0]);\n  // mat4.mul(mvpMatrix, projectionMatrix, viewMatrix);\n  // mat4.mul(mvpMatrix, mvpMatrix, modelMatrix);\n  var mvpMatrix = new Float32Array([ //\n    2, 0, 0, 0, //\n    0, 2, 0, 0, //\n    0, 0, -10, 0, //\n    0, 0, 0, 1, //\n  ]);\n\n  phina.define(\"phina.glfilter.ShaderNode\", {\n    superClass: \"phina.glfilter.Node\",\n\n    uniformValues: null,\n\n    init: function() {\n      this.superInit();\n      this.uniformValues = {};\n    },\n\n    _setup: function() {\n      var gl = this.layer.gl;\n      this.screen = phigl.Drawable(gl)\n        .setProgram(this._createProgram(gl))\n        .setGeometry(phigl.PlaneXY({\n          width: 1,\n          height: 1,\n          normalsEnabled: false,\n        }))\n        .declareUniforms([].concat(this.getVertexShaderUniforms(), this.getFragmentShaderUniforms()));\n      this.screen.uniforms[\"mvpMatrix\"].setValue(mvpMatrix);\n\n      return this;\n    },\n\n    _render: function(src, dst) {\n      var gl = this.layer.gl;\n\n      dst.bind();\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      this.screen.uniforms[\"texture\"].setValue(0).setTexture(src.texture);\n      this.uniformValues\n        .forIn(function(key, value) {\n          if (key === \"texture\") return;\n          this.screen.uniforms[key].setValue(value);\n        }.bind(this));\n      this.screen.draw();\n\n      gl.flush();\n\n      return this;\n    },\n\n    _createProgram: function(gl) {\n      var srcV = this.getVertexShaderSource();\n      var srcF = this.getFragmentShaderSource();\n\n      return phigl.Program(gl)\n        .attach(phigl.VertexShader().setSource(srcV))\n        .attach(phigl.FragmentShader().setSource(srcF))\n        .link();\n    },\n\n    getVertexShaderSource: function() {\n      return [\n        \"attribute vec3 position;\",\n        \"attribute vec2 uv;\",\n\n        \"uniform mat4 mvpMatrix;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vUv = uv;\",\n        \"  gl_Position = mvpMatrix * vec4(position, 1.0);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n    getVertexShaderUniforms: function() {\n      return [\"mvpMatrix\"];\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 col = texture2D(texture, vUv);\",\n        \"  if (col.a == 0.0) discard;\",\n        \"  gl_FragColor = col;\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n    getFragmentShaderUniforms: function() {\n      return [\"texture\"];\n    },\n\n  });\n\n  phina.define(\"phina.glfilter.StartNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      // filp Y axis\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main(void) {\",\n        \"  vec4 col = texture2D(texture, vec2(vUv.x, 1.0 - vUv.y));\",\n        \"  if (col.a == 0.0) discard;\",\n        \"  gl_FragColor = col;\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n  });\n\n  phina.define(\"phina.glfilter.EndNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    _render: function(src /*, dst*/ ) {\n      var gl = this.layer.gl;\n\n      phigl.Framebuffer.unbind(gl);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      this.screen.uniforms[\"texture\"].setValue(0).setTexture(src.texture);\n      this.screen.draw();\n\n      gl.flush();\n    },\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.glfilter.ZoomBlurNode\", {\n    superClass: \"phina.glfilter.ShaderNode\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    getFragmentShaderSource: function() {\n      return [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n        \"uniform float x;\",\n        \"uniform float y;\",\n        \"uniform float strength;\",\n\n        \"varying vec2 vUv;\",\n\n        \"const float nFrag = 1.0 / 30.0;\",\n\n        \"float rnd(vec3 scale, float seed){\",\n        \"    return fract(sin(dot(gl_FragCoord.stp + seed, scale)) * 43758.5453 + seed);\",\n        \"}\",\n\n        \"void main(void){\",\n        \"    vec2  center = vec2(x, 1.0 - y);\",\n        \"    vec4  destColor = vec4(0.0);\",\n        \"    float random = rnd(vec3(12.9898, 78.233, 151.7182), 0.0);\",\n        \"    vec2  fcc = vUv - center;\",\n        \"    float totalWeight = 0.0;\",\n        \"\",\n        \"    for(float i = 0.0; i <= 30.0; i++){\",\n        \"        float percent = (i + random) * nFrag;\",\n        \"        float weight = percent - percent * percent;\",\n        \"        vec2  t = vUv - fcc * percent * strength * nFrag;\",\n        \"        vec4 col = texture2D(texture, t);\",\n        \"        destColor += col * weight;\",\n        \"        totalWeight += weight;\",\n        \"    }\",\n        \"    gl_FragColor = vec4(destColor / totalWeight);\",\n        \"}\",\n      ].join(\"\\n\");\n    },\n    getFragmentShaderUniforms: function() {\n      return [\"texture\", \"x\", \"y\", \"strength\"];\n    },\n\n  });\n\n});\n"]}